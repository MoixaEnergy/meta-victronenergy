From fc0cd6c3db32e938ddc2859624bf12d0fe6ba574 Mon Sep 17 00:00:00 2001
From: Jeroen Hofstee <jhofstee@victronenergy.com>
Date: Tue, 28 Apr 2020 20:50:27 +0200
Subject: [PATCH 09/14] add VisualModels

The VisualModels makes it possible to concatenate multiple VisualModel
derived ones. It is intended for (mostly) static models like menus in
our case.
---
 .../graphicsitems/qdeclarativeitemsmodule.cpp |   2 +
 .../qdeclarativevisualitemmodel.cpp           | 182 ++++++++++++++++++
 .../qdeclarativevisualitemmodel_p.h           |  45 +++++
 3 files changed, 229 insertions(+)

diff --git a/src/declarative/graphicsitems/qdeclarativeitemsmodule.cpp b/src/declarative/graphicsitems/qdeclarativeitemsmodule.cpp
index 58096a4235..2baab5db88 100644
--- a/src/declarative/graphicsitems/qdeclarativeitemsmodule.cpp
+++ b/src/declarative/graphicsitems/qdeclarativeitemsmodule.cpp
@@ -151,6 +151,7 @@ void QDeclarativeItemModule::defineModule()
     qmlRegisterType<QDeclarativeViewSection>("QtQuick",1,0,"ViewSection");
     qmlRegisterType<QDeclarativeVisualDataModel>("QtQuick",1,0,"VisualDataModel");
     qmlRegisterType<QDeclarativeVisualItemModel>("QtQuick",1,0,"VisualItemModel");
+    qmlRegisterType<QDeclarativeVisualModels>("QtQuick",1,0,"VisualModels");
 
     qmlRegisterType<QDeclarativeAnchors>();
     qmlRegisterType<QDeclarativeKeyEvent>();
@@ -259,6 +260,7 @@ void QDeclarativeItemModule::defineModuleCompat()
     qmlRegisterType<QDeclarativeViewSection>("Qt",4,7,"ViewSection");
     qmlRegisterType<QDeclarativeVisualDataModel>("Qt",4,7,"VisualDataModel");
     qmlRegisterType<QDeclarativeVisualItemModel>("Qt",4,7,"VisualItemModel");
+    qmlRegisterType<QDeclarativeVisualModels>("Qt",4,7,"VisualModels");
 
     qmlRegisterType<QGraphicsWidget>("Qt",4,7,"QGraphicsWidget");
     qmlRegisterExtendedType<QGraphicsWidget,QDeclarativeGraphicsWidget>("Qt",4,7,"QGraphicsWidget");
diff --git a/src/declarative/graphicsitems/qdeclarativevisualitemmodel.cpp b/src/declarative/graphicsitems/qdeclarativevisualitemmodel.cpp
index 5c9bbd38d1..6cb7a14051 100644
--- a/src/declarative/graphicsitems/qdeclarativevisualitemmodel.cpp
+++ b/src/declarative/graphicsitems/qdeclarativevisualitemmodel.cpp
@@ -1494,6 +1494,188 @@ void QDeclarativeVisualDataModel::_q_destroyingPackage(QDeclarativePackage *pack
     emit destroyingItem(qobject_cast<QDeclarativeItem*>(package->part(d->m_part)));
 }
 
+class QDeclarativeVisualModelsPrivate : public QObjectPrivate
+{
+public:
+    QDeclarativeVisualModelsPrivate() : QObjectPrivate() {}
+};
+
+/**
+ * QDeclarativeVisualModels Concat mutiple visual models, for example:
+ *
+ *  model: VisualModels {
+ *    VisualItemModel {
+ *    }
+ *
+ *    VisualDataModel {
+ *    }
+ *
+ *    VisualModels {
+ *    }
+ *  }
+ */
+QDeclarativeVisualModels::QDeclarativeVisualModels(QObject *parent) :
+  QDeclarativeVisualModel(*(new QDeclarativeVisualModelsPrivate), parent)
+{
+}
+
+QDeclarativeListProperty<QDeclarativeVisualModel> QDeclarativeVisualModels::models()
+{
+    return QDeclarativeListProperty<QDeclarativeVisualModel>(this, this, QDeclarativeVisualModels::model_append,
+                                                      QDeclarativeVisualModels::model_count, QDeclarativeVisualModels::model_at);
+}
+
+int QDeclarativeVisualModels::count() const
+{
+    int count = 0;
+    Q_FOREACH(QDeclarativeVisualModel *model, mModels)
+        count += model->count();
+    return count;
+}
+
+bool QDeclarativeVisualModels::isValid() const
+{
+    // note: the data model will have a count of zero when it has no delegate.
+    // so that one is implicitly skipped well the other remain visible in that case.
+    return true;
+}
+
+QDeclarativeItem *QDeclarativeVisualModels::item(int index, bool complete)
+{
+    QDeclarativeVisualModel *model = findModelChangeIndex(index);
+    if (model)
+        return model->item(index, complete);
+    return 0;
+}
+
+QDeclarativeVisualDataModel::ReleaseFlags QDeclarativeVisualModels::release(QDeclarativeItem *item)
+{
+    ReleaseFlags flags = 0;
+    Q_FOREACH(QDeclarativeVisualModel *model, mModels)
+        flags |= model->release(item);
+    return flags;
+}
+
+bool QDeclarativeVisualModels::completePending() const
+{
+    Q_FOREACH(QDeclarativeVisualModel *model, mModels) {
+        if (model->completePending())
+            return true;
+    }
+    return false;
+}
+
+void QDeclarativeVisualModels::completeItem()
+{
+     Q_FOREACH(QDeclarativeVisualModel *model, mModels)
+         model->completeItem();
+}
+
+QString QDeclarativeVisualModels::stringValue(int index, const QString &role)
+{
+    QDeclarativeVisualModel *model = findModelChangeIndex(index);
+    if (model)
+        return model->stringValue(index, role);
+    return QString();
+}
+
+int QDeclarativeVisualModels::indexOf(QDeclarativeItem *item, QObject *objectContext) const
+{
+    int index = 0;
+    Q_FOREACH(QDeclarativeVisualModel *model, mModels) {
+        int indexInModel = model->indexOf(item, objectContext);
+        if (indexInModel != -1)
+            return index + indexInModel;
+        index += model->count();
+    }
+
+    return -1;
+}
+
+void QDeclarativeVisualModels::onCreatedItem(int index, QDeclarativeItem *item)
+{
+    QDeclarativeVisualModel *model = static_cast<QDeclarativeVisualModel *>(sender());
+    index = absoluteIndex(model, index);
+    emit createdItem(index, item);
+}
+
+void QDeclarativeVisualModels::onItemsInserted(int index, int count)
+{
+    QDeclarativeVisualModel *model = static_cast<QDeclarativeVisualModel *>(sender());
+    index = absoluteIndex(model, index);
+    emit itemsInserted(index, count);
+}
+
+void QDeclarativeVisualModels::onItemsRemoved(int index, int count)
+{
+    QDeclarativeVisualModel *model = static_cast<QDeclarativeVisualModel *>(sender());
+    index = absoluteIndex(model, index);
+    emit itemsRemoved(index, count);
+}
+
+void QDeclarativeVisualModels::onItemsMoved(int from, int to, int count)
+{
+    QDeclarativeVisualModel *model = static_cast<QDeclarativeVisualModel *>(sender());
+    from = absoluteIndex(model, from);
+    to = absoluteIndex(model, to);
+    emit itemsMoved(from, to, count);
+}
+
+QDeclarativeVisualModel *QDeclarativeVisualModels::findModelChangeIndex(int &index)
+{
+    Q_FOREACH(QDeclarativeVisualModel *model, mModels) {
+        int count = model->count();
+        if (index < count)
+            return model;
+        index -= count;
+    }
+    return 0;
+}
+
+int QDeclarativeVisualModels::absoluteIndex(QDeclarativeVisualModel *model, int index)
+{
+    Q_FOREACH(QDeclarativeVisualModel *itt, mModels) {
+        if (itt == model)
+            return index;
+        index += itt->count();
+    }
+    return -1;
+}
+
+void QDeclarativeVisualModels::model_append(QDeclarativeListProperty<QDeclarativeVisualModel> *prop, QDeclarativeVisualModel *item)
+{
+    QDeclarative_setParent_noEvent(item, prop->object);
+
+    QDeclarativeVisualModels *visualModules = static_cast<QDeclarativeVisualModels *>(prop->data);
+    int oldCount = visualModules->count();
+
+    visualModules->mModels.append(item);
+
+    connect(item, SIGNAL(countChanged()), visualModules, SIGNAL(countChanged()));
+    connect(item, SIGNAL(destroyingItem(QDeclarativeItem*)), visualModules, SIGNAL(destroyingItem(QDeclarativeItem*)));
+    connect(item, SIGNAL(modelReset()), visualModules, SIGNAL(modelReset()));
+
+    connect(item, SIGNAL(itemsInserted(int,int)), visualModules, SLOT(onItemsInserted(int,int)));
+    connect(item, SIGNAL(itemsRemoved(int,int)), visualModules, SLOT(onItemsRemoved(int,int)));
+    connect(item, SIGNAL(itemsMoved(int,int,int)), visualModules, SLOT(onItemsMoved(int,int,int)));
+    connect(item, SIGNAL(createdItem(int,QDeclarativeItem*)), visualModules, SLOT(onCreatedItem(int,QDeclarativeItem*)));
+
+    emit visualModules->itemsInserted(oldCount - 1, item->count());
+    emit visualModules->modelsChanged();
+}
+
+int QDeclarativeVisualModels::model_count(QDeclarativeListProperty<QDeclarativeVisualModel> *prop)
+{
+    QDeclarativeVisualModels *visualModules = static_cast<QDeclarativeVisualModels *>(prop->data);
+    return visualModules->mModels.count();
+}
+
+QDeclarativeVisualModel *QDeclarativeVisualModels::model_at(QDeclarativeListProperty<QDeclarativeVisualModel> *prop, int index)
+{
+    QDeclarativeVisualModels *visualModules = static_cast<QDeclarativeVisualModels *>(prop->data);
+    return visualModules->mModels.at(index);
+}
+
 QT_END_NAMESPACE
 
 QML_DECLARE_TYPE(QListModelInterface)
diff --git a/src/declarative/graphicsitems/qdeclarativevisualitemmodel_p.h b/src/declarative/graphicsitems/qdeclarativevisualitemmodel_p.h
index 84b3853d79..ade771a0f0 100644
--- a/src/declarative/graphicsitems/qdeclarativevisualitemmodel_p.h
+++ b/src/declarative/graphicsitems/qdeclarativevisualitemmodel_p.h
@@ -249,11 +249,56 @@ public:
     static QHash<QObject*, QDeclarativeVisualItemModelAttached*> attachedProperties;
 };
 
+class Q_AUTOTEST_EXPORT QDeclarativeVisualModels : public QDeclarativeVisualModel
+{
+    Q_OBJECT
+    Q_PROPERTY(QDeclarativeListProperty<QDeclarativeVisualModel> models READ models NOTIFY modelsChanged)
+    Q_CLASSINFO("DefaultProperty", "models")
+
+public:
+    QDeclarativeVisualModels(QObject *parent=0);
+    virtual ~QDeclarativeVisualModels() {}
+
+    QDeclarativeListProperty<QDeclarativeVisualModel> models();
+
+    virtual int count() const;
+    virtual bool isValid() const;
+    virtual QDeclarativeItem *item(int index, bool complete=true);
+    virtual ReleaseFlags release(QDeclarativeItem *item);
+    virtual bool completePending() const;
+    virtual void completeItem();
+    virtual QString stringValue(int index, const QString &role);
+    virtual void setWatchedRoles(QList<QByteArray>) {}
+
+    virtual int indexOf(QDeclarativeItem *item, QObject *objectContext) const;
+
+signals:
+    void modelsChanged();
+
+private slots:
+    void onItemsInserted(int index, int count);
+    void onCreatedItem(int index, QDeclarativeItem *item);
+    void onItemsRemoved(int index, int count);
+    void onItemsMoved(int from, int to, int count);
+
+private:
+    QDeclarativeVisualModel *findModelChangeIndex(int &index);
+    int absoluteIndex(QDeclarativeVisualModel *model, int index);
+
+    QList<QDeclarativeVisualModel *> mModels;
+
+    static void model_append(QDeclarativeListProperty<QDeclarativeVisualModel> *prop, QDeclarativeVisualModel *item);
+    static int model_count(QDeclarativeListProperty<QDeclarativeVisualModel> *prop);
+    static QDeclarativeVisualModel *model_at(QDeclarativeListProperty<QDeclarativeVisualModel> *prop, int index);
+
+    Q_DISABLE_COPY(QDeclarativeVisualModels)
+};
 
 QT_END_NAMESPACE
 
 QML_DECLARE_TYPE(QDeclarativeVisualModel)
 QML_DECLARE_TYPE(QDeclarativeVisualItemModel)
+QML_DECLARE_TYPE(QDeclarativeVisualModels)
 QML_DECLARE_TYPEINFO(QDeclarativeVisualItemModel, QML_HAS_ATTACHED_PROPERTIES)
 QML_DECLARE_TYPE(QDeclarativeVisualDataModel)
 
-- 
2.17.1

